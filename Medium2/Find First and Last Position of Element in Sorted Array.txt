
//     public int[] searchRange(int[] nums, int target) {
//         int[] res=new int[2];
//         res[0]=firstNumber(nums,target);
//         res[1]=secondNumber(nums,target);
//         return res;
//     }
    
//     public int firstNumber(int[] nums, int target)
//     {
//         int low=0;
//         int high=nums.length-1;
        
//         while(low<=high)
//         {
//             int mid=(low+high)/2;
//             if(nums[mid]==target) return mid;
            
//             if(nums[mid]<target) low=mid+1;
            
//             if(nums[mid]>target) high=mid-1;
//         }
//         return -1;
//     }
    
//     public int secondNumber(int[] nums,int target)
//     {
//         int low=0;
//         int high=nums.length-1;
        
//         while(low<=high)
//         {
//             int mid=(low+high)/2;
//             if(nums[mid]==target) return mid;
            
//             if(nums[mid]<target) low=mid+1;
            
//             if(nums[mid]>target) high=mid-1;
//         }
//         return -1;
//     }
    
    public class Solution {
public int[] searchRange(int[] nums, int target) {
    int[] result = new int[2];
    result[0] = findFirst(nums, target);
    result[1] = findLast(nums, target);
    return result;
}

private int findFirst(int[] nums, int target){
    int idx = -1;
    int start = 0;
    int end = nums.length - 1;
    while(start <= end){
        int mid = (start + end) / 2;
        if(nums[mid] >= target){
            end = mid - 1;
        }else{
            start = mid + 1;
        }
        if(nums[mid] == target) idx = mid;
    }
    return idx;
}

private int findLast(int[] nums, int target){
    int idx = -1;
    int start = 0;
    int end = nums.length - 1;
    while(start <= end){
        int mid = (start + end) / 2;
        if(nums[mid] <= target){
            start = mid + 1;
        }else{
            end = mid - 1;
        }
        if(nums[mid] == target) idx = mid;
    }
    return idx;
}
}

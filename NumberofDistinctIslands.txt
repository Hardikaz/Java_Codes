//{ Driver Code Starts
// Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

// Position this line where user code will be pasted.

class GFG {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while (T-- > 0) {
            int n = sc.nextInt();
            int m = sc.nextInt();
            int[][] grid = new int[n][m];

            for (int i = 0; i < n; i++) {

                for (int j = 0; j < m; j++) {
                    grid[i][j] = sc.nextInt();
                }
            }

            Solution ob = new Solution();
            int ans = ob.countDistinctIslands(grid);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends


// User function Template for Java


class Solution {
    
    public String toString(int r,int c){
        return Integer.toString(r)+" "+Integer.toString(c);
    }
    
    public void dfs(int row,int col,int[][] grid,int[][] vis,ArrayList<String> loc,int irow,int icol)
    {
        vis[row][col]=1;
        loc.add(toString(row-irow,col-icol));
        
        
        int drow[]={-1,0,+1,0};
        int dcol[]={0,+1,0,-1};
        
        for(int i=0;i<4;i++)
        {
            int nrow=row+drow[i];
            int ncol=col+dcol[i];
            
            if(nrow>=0 && nrow<grid.length && ncol>=0 && ncol<grid[0].length && vis[nrow][ncol]==0 && grid[nrow][ncol]==1)
            dfs(nrow,ncol,grid,vis,loc,irow,icol);
        }
        
        
        
    }

    int countDistinctIslands(int[][] grid) {
        // Your Code here
        HashSet<ArrayList<String>> set=new HashSet<>();
        int[][] vis=new int[grid.length][grid[0].length];
        
        for(int i=0;i<grid.length;i++)
        {
            for(int j=0;j<grid[0].length;j++)
            {
                if(vis[i][j]==0 && grid[i][j]==1){
                ArrayList<String> loc=new ArrayList<>();
                dfs(i,j,grid,vis,loc,i,j);
                set.add(loc);
                }
            }
        }
        return set.size();
    }

}

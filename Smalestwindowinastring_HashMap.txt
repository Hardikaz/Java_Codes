// Java program to find smallest
// window containing
// all characters of a pattern.

import java.io.*;
import java.util.*;

class GFG {
	public static String smallestWindow(String s, String p)
	{
		// Your code here
		if (s.isEmpty() || p.isEmpty())
			return "-1";

		Map<Character, Integer> map = new HashMap<>();
		for (int i = 0; i < p.length(); i++) {
			char c = p.charAt(i);
			map.put(c, map.getOrDefault(c, 0) + 1);
		}
		int i = 0, j = 0, count = map.size();
		int left = 0, right = 0, min = s.length();
		boolean found = false;

		while (j < s.length()) {
			char endchar = s.charAt(j++);
			if (map.containsKey(endchar)) {
				map.put(endchar, map.get(endchar) - 1);
				if (map.get(endchar) == 0)
					count -= 1;
			}
			if (count > 0)
				continue;

			while (count == 0) {
				char strchar = s.charAt(i++);
				if (map.containsKey(strchar)) {
					map.put(strchar, map.get(strchar) + 1);
					if (map.get(strchar) > 0)
						count += 1;
				}
			}
			if ((j - i) < min) {
				left = i - 1;
				right = j;
				min = j - i;

				found = true;
			}
		}
		return !found ? "-1" : s.substring(left, right);
	}
	public static void main(String[] args)
	{
		String str = "this is a test string";
		String pat = "tist";

		System.out.print(smallestWindow(str, pat));
	}
}
// This code is contributed by Raunak Singh
